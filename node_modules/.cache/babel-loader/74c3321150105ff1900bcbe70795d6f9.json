{"ast":null,"code":"import _defineProperty from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/arumgaladima/appserve_01/rps/web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/arumgaladima/appserve_01/rps/web/src/components/Dashboards.js\";\nimport React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport { admin } from '../firebase.js';\nimport TableauReport from 'tableau-react';\nimport Dashes from '../Dashboards.json'; // Initialize firestore\n\nvar db = admin.firestore(); // Disable deprecated features\n\ndb.settings({\n  timestampsInSnapshots: true\n});\n\nvar Dashboards =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Dashboards, _Component);\n\n  function Dashboards(props) {\n    var _this;\n\n    _classCallCheck(this, Dashboards);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dashboards).call(this, props));\n    _this.state = {\n      redirect: false,\n      userEmail: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetEmail = _this.resetEmail.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Dashboards, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var target = e.target;\n      var value = target.type === 'checkbox' ? target.checked : target.value;\n      var name = target.name;\n      this.setState(_defineProperty({}, name, value));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      admin.auth().onAuthStateChanged(function (user) {\n        // console.log(user.email);\n        if (user === null) {\n          _this2.setState({\n            redirect: true,\n            userEmail: user.email\n          });\n        }\n\n        var data = {\n          name: user.displayName,\n          email: user.email,\n          dashboards: 'IT'\n        }; // Add a new document in collection \"cities\" with ID 'LA'\n\n        var userRef = db.collection('users').doc(user.uid);\n        var setWithOptions = userRef.set(data, {\n          merge: true\n        }); // if the team of the individual is of a certain type, render a certain group of Dashboards\n\n        var getDoc = userRef.get().then(function (doc) {\n          if (!doc.exists) {\n            console.log('No such document!');\n          } else {\n            console.log('Document data:', doc.data().team); // While user's 'team' matches the doc, render it\n\n            for (var i = 0; i < Dashes.dashboards.length; i++) {\n              console.log(Dashes.dashboards[i].url); // if (Dashes.dashboards[i].group === doc.data().team) {\n              //\n              // }\n            }\n          }\n        }).catch(function (err) {\n          console.log('Error getting document', err);\n        });\n      });\n    } // reset email\n\n  }, {\n    key: \"resetEmail\",\n    value: function resetEmail() {\n      admin.auth.sendPasswordResetEmail(this.state.userEmail).then(function () {// Email sent.\n      }).catch(function (error) {// An error happened.\n      });\n    } // if not in firestore then add\n\n  }, {\n    key: \"databaseRecord\",\n    value: function databaseRecord() {}\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {// admin.auth().onAuthStateChanged((user) => {\n      //   var data = {\n      //     name: user.displayName,\n      //     email: user.email,\n      //     dashboards: 'IT'\n      //   };\n      //\n      //   // Add a new document in collection \"cities\" with ID 'LA'\n      //   var userRef = db.collection('users').doc(user.uid);\n      //\n      //   // if the team of the individual is of a certain type, render a certain group of Dashboards\n      //   var getDoc = userRef.get()\n      //     .then(doc => {\n      //       if (!doc.exists) {\n      //         console.log('No such document!');\n      //       } else {\n      //         console.log('Document data:', doc.data().team);\n      //         // While user's 'team' matches the doc, render it\n      //         for (var i = 0; i < Dashes.dashboards.length; i++) {\n      //           console.log(Dashes.dashboards[i].url);\n      //           // if (Dashes.dashboards[i].group === doc.data().team) {\n      //           //\n      //           // }\n      //         }\n      //       }\n      //     })\n      //     .catch(err => {\n      //       console.log('Error getting document', err);\n      //     });\n      // });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault(); //on submit, set data in firebase equal to this new data\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirect === true) {\n        return React.createElement(Redirect, {\n          to: \"/login\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        className: \"signin-page\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Signed In\"), React.createElement(\"button\", {\n        onClick: this.resetEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Reset Email\"), React.createElement(\"div\", {\n        className: \"tableau-dashes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(TableauReport, {\n        url: \"https://public.tableau.com/views/AgendaMedellnODS/Portada?:embed=y&:embed_code_version=3&:loadOrderID=0&:display_count=yes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Dashboards;\n}(Component);\n\nexport default Dashboards;","map":{"version":3,"sources":["/Users/arumgaladima/appserve_01/rps/web/src/components/Dashboards.js"],"names":["React","Component","Grid","Row","Col","Link","Redirect","admin","TableauReport","Dashes","db","firestore","settings","timestampsInSnapshots","Dashboards","props","state","redirect","userEmail","handleChange","bind","handleSubmit","resetEmail","e","target","value","type","checked","name","setState","auth","onAuthStateChanged","user","email","data","displayName","dashboards","userRef","collection","doc","uid","setWithOptions","set","merge","getDoc","get","then","exists","console","log","team","i","length","url","catch","err","sendPasswordResetEmail","error","preventDefault"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport {admin} from '../firebase.js';\nimport TableauReport from 'tableau-react';\n\nimport Dashes from '../Dashboards.json'\n\n// Initialize firestore\nlet db = admin.firestore();\n// Disable deprecated features\ndb.settings({\n  timestampsInSnapshots: true\n});\n\nclass Dashboards extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          redirect: false,\n          userEmail: ''\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.resetEmail = this.resetEmail.bind(this);\n    }\n\n    handleChange(e) {\n      let target = e.target;\n      let value = target.type === 'checkbox' ? target.checked : target.value;\n      let name = target.name;\n\n      this.setState({\n        [name]: value,\n      });\n    }\n\n    componentDidMount(){\n      admin.auth().onAuthStateChanged((user) => {\n        // console.log(user.email);\n        if(user === null) {\n          this.setState({redirect: true, userEmail: user.email});\n        }\n        var data = {\n          name: user.displayName,\n          email: user.email,\n          dashboards: 'IT'\n        };\n\n        // Add a new document in collection \"cities\" with ID 'LA'\n        var userRef = db.collection('users').doc(user.uid);\n\n        var setWithOptions = userRef.set(data, {merge: true});\n\n        // if the team of the individual is of a certain type, render a certain group of Dashboards\n        var getDoc = userRef.get()\n          .then(doc => {\n            if (!doc.exists) {\n              console.log('No such document!');\n            } else {\n              console.log('Document data:', doc.data().team);\n              // While user's 'team' matches the doc, render it\n              for (var i = 0; i < Dashes.dashboards.length; i++) {\n                console.log(Dashes.dashboards[i].url);\n                // if (Dashes.dashboards[i].group === doc.data().team) {\n                //\n                // }\n              }\n            }\n          })\n          .catch(err => {\n            console.log('Error getting document', err);\n          });\n      });\n    }\n\n    // reset email\n    resetEmail() {\n      admin.auth.sendPasswordResetEmail(this.state.userEmail).then(function() {\n        // Email sent.\n      }).catch(function(error) {\n        // An error happened.\n      });\n    }\n\n    // if not in firestore then add\n    databaseRecord() {\n\n    }\n\n    componentWillMount() {\n      // admin.auth().onAuthStateChanged((user) => {\n      //   var data = {\n      //     name: user.displayName,\n      //     email: user.email,\n      //     dashboards: 'IT'\n      //   };\n      //\n      //   // Add a new document in collection \"cities\" with ID 'LA'\n      //   var userRef = db.collection('users').doc(user.uid);\n      //\n      //   // if the team of the individual is of a certain type, render a certain group of Dashboards\n      //   var getDoc = userRef.get()\n      //     .then(doc => {\n      //       if (!doc.exists) {\n      //         console.log('No such document!');\n      //       } else {\n      //         console.log('Document data:', doc.data().team);\n      //         // While user's 'team' matches the doc, render it\n      //         for (var i = 0; i < Dashes.dashboards.length; i++) {\n      //           console.log(Dashes.dashboards[i].url);\n      //           // if (Dashes.dashboards[i].group === doc.data().team) {\n      //           //\n      //           // }\n      //         }\n      //       }\n      //     })\n      //     .catch(err => {\n      //       console.log('Error getting document', err);\n      //     });\n      // });\n    }\n    componentWillUnmount() {\n\n    }\n\n    handleSubmit(e) {\n      e.preventDefault();\n      //on submit, set data in firebase equal to this new data\n    }\n\n    render() {\n      if(this.state.redirect === true) {\n        return <Redirect to='/login' />\n      }\n        return (\n          <div>\n            <h1 className=\"signin-page\">Signed In</h1>\n            <button onClick={this.resetEmail}>Reset Email</button>\n            <div className=\"tableau-dashes\">\n              <TableauReport url='https://public.tableau.com/views/AgendaMedellnODS/Portada?:embed=y&:embed_code_version=3&:loadOrderID=0&:display_count=yes'/>\n            </div>\n          </div>\n        );\n    }\n}\nexport default Dashboards;\n"]},"metadata":{},"sourceType":"module"}